# vim: ft=sh shiftwidth=2 tabstop=2 noexpandtab

################################################################################
### __                  _   _                  ____
## / _|_   _ _ __   ___| |_(_) ___  _ __  ___ / /\ \
##| |_| | | | '_ \ / __| __| |/ _ \| '_ \/ __| |  | |
##|  _| |_| | | | | (__| |_| | (_) | | | \__ \ |  | |
##|_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/ |  | |
###                                           \_\/_/
################################################################################

# avoid `which' (https://stackoverflow.com/a/677212/1381065)

# use `exa' if installed.
#[[ "$(command -v exa)" ]] && ls_cmd='exa'


cd() {
	# ls the contents once cd'ed into a dir
	builtin cd "${@:-$HOME}" && ls
}


is_interactive_sh() {
	# is this shell interactive?
	[[ $- == **i** ]] && printf "%s\n" "... is interactive"
}


is_login_sh() {
	# is this a login shell?
	[[ -o login ]] && printf "%s\n" "... is login shell"
}

is_blank() { [[ -z "$*" ]]; }


is_notblank() { [[ -n "$*" ]]; }


is_even() { (($1 % 2 == 0)); }


is_dir() { [[ -d "$1" ]]; }


is_executable() { [[ -x "$1" ]]; }
alias executes='is_executable'


file_is_dir() { [[ -d "$1" ]]; }


file_is_newer() { [[ "$1" -nt "$2" ]]; }


string_contains() {
	# test that regex matches string
	string="$1" ; regex="$2"
	[[ "$string" =~ "$regex" ]]
}


path() { echo "$PATH" | tr ":" "\n"; }


tempcd() { cd $(mktemp -d); }
alias tcd='tempcd'


len() { printf "%4d\n" "$#@"; }


p() { printf "%10s\n" "$*"; }


car() { echo $@[1]; }


cdr() { echo $xs[2,-1]; }


is_installed() {
	# arch
	pacman -Q $1
	# debian
	#dpkg-query --show --showformat='${db:Status-Status}' $1
}
alias installed=is_installed

rc() {
	prefix=${CONFIGDIR:-${HOME}/.dotfiles}
	selected=$(fzf < $prefix/rcfiles.list)
	$EDITOR "$prefix/$selected"
}

resolution() {
	xdpyinfo | grep dimensions | awk '{print $2}'
}
alias dimensions=resolution


df() {
	printf "%s\n" "Running df local function"
	printf "%s\n" "See `type df` and `which df` for more"
	/bin/df -hH  --print-type \
		--exclude-type={squashfs,tmpfs,devtmpfs,vfat}
	}


cdm() {
	# cd into a directory from a menu
	DIR=$(find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux) && cd $DIR
} #// cmd

fzf_pacman_install() {
	# pacman | fzf | xargs
	# menu of available packages with preview. use TAB to select packages to install
	pacman -Slq | fzf --multi --preview 'pacman -Si {1}' | xargs -ro sudo pacman -S
}
alias fpac='fuzzy_pac_install'

fzf_pacman_remove() {
	# pacman remove selections
	pacman -Qq | fzf --multi --preview 'pacman -Qi {1}' | xargs -ro sudo pacman -Rns
}

get_X_key() {
	# Find the X key code for a given key press"
	xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
}


recent_pkgs() {
	# show recently installed packages. show 20 by default (Arch Linux only)
	local number="${1:-20}"
	expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort | tail "-$number"
}


mcd() {
	# make a directory and cd into at the same time
	[[ -n "$1" ]] && mkdir -p "$@" && cd "$1"
} #// mcd


mntuser() {
	# mount a dev as user
	local dev="$1"
	local mntpoint="$2"
	sudo mount -ouser,umask=0000 "$dev" "$mntpoint"
}

lmv() {
	# mv a file or directory and make a symbolic link to it
	local file="$1" dir="$2"
	[[ -e $file ]] && [[ -e $dir ]] && mv $file $dir && ln -s $dir/$(basename $file) $(dirname $file)
} #// lmv

readmd() {
	# read a Markdown file in terminal
	local f="$1"
	pandoc --from=markdown_mmd --output=html "$f" | w3m -T text/html
} #// gfm

mkcp() {
	# make a newdir, cp files into newdir, specified as last argument
	mkdir -p ${@: -1:1} && cp * "${@: -1:1}/"
} # // mkcp

mkmv() {
	# make a newdir, mv files into newdir, specified as last argument
	mkdir -p ${@-1:1} && mv ./* "./${@: -1:1}/"
} # // mkmv

swap_file_names() {
	# rename file1 to file2 and vice versa
	local f1="$1"
	local f2="$2"
	mv "$f1" "temp"
	mv "$f2" "$f1"
	mv "temp" "$f2"
} #// swap_file_names

man() {
	# colorized man pages
	env LESS_TERMCAP_mb=$'\E[01;31m' \
		LESS_TERMCAP_md=$'\E[01;38;5;74m' \
		LESS_TERMCAP_me=$'\E[0m' \
		LESS_TERMCAP_se=$'\E[0m' \
		LESS_TERMCAP_so=$'\E[38;5;246m' \
		LESS_TERMCAP_ue=$'\E[0m' \
		LESS_TERMCAP_us=$'\E[04;38;5;146m' \
		man "$@"
	} #// man

topdf() {
	# text to pdf
	enscript --quiet --no-header --output=- ${1} | ps2pdf - ${1%.*}.pdf
} #// topdf

mergepdf() {
	# merge pdfs
	local output="${1}"
	shift
	gs -q -dnopause -dbatch -sdevice=pdfwrite -soutputfile=$output $*
} #// mergepdf

open() {
	devour mimeopen $1
}


x() {
	# extract tar archive
	if [[ $#@ = 0 ]] ; then
		printf "HELP: extract a tar archive\n"
		printf "HELP: pass archive as first argument\n"
	else
		archive="$1"
		archive_extension="${1#*.}"
		archive_mimetype="$(mimetype "$archive" | cut -d' ' -f2)"

		case "$archive_extension" in
			# gzip file
			tar.gz  | tgz ) tar -xzvf "$archive" ;;
			# bzip2 file
			tar.bz2 | tbz ) tar -xjvf "$archive" ;;
			#xzip file
			tar.xz  | txz ) tar -xJvf "$archive" ;;
			# zip
			zip ) unzip "$archive" ;;
			# gzip
			gz | * ) tar -xvf "$archive" ;;
		esac

		[[ $? == 0 ]] || printf "%s\n" "was the file a zipped tar archive?"

	fi
}

# display name of shell and name of terminal
my_term() {
	ps --no-headers --pid $PPID | awk '{print $4}'
}

sh_term() {
	sh="$(basename "${SHELL}")"
	term="$(ps --no-headers --pid $PPID | awk '{print $4}')"
	printf "%s %s\n" "$sh" "$term"
}


# latitude and longitude from IP addr
latlong() {
	http ifconfig.co/json | jq '"\(.latitude),\(.longitude)"' | tr -d \"
}
alias geoloc=latlong

wttr() {
	local request
	request="wttr.in/$(latlong)\?${1-2}QF"
	[ "$(tput cols)" -lt 125 ] && request+='?n'
	curl -H "Accept-Language: ${LANG%_*}" --compressed "$request"
}

#curl api.openweathermap.org/data/2.5/forecast?id=524901&APPID=$API_WEATHER_OWM
